---
# NOTE: this file is managed by terraform

name: CI

on:  # yamllint disable-line rule:truthy
  pull_request:

    branches:
      - main

    types:
      - edited
      - opened
      - synchronize

  push:
    branches:
      - test-*

  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:

  pre-commit:
    uses: ./.github/workflows/reusable-pre-commit.yaml

  build-test:
    uses: ./.github/workflows/reusable-build-test.yaml

  dependency:
    if: ${{ github.event.repository.visibility == 'public' && (github.event_name == 'pull_request' || github.event.workflow_run.event == 'pull_request')}}
    uses: ./.github/workflows/reusable-dependency-review.yaml

  validate-release:
    if: ${{ startsWith(github.head_ref, 'release/') }}

    needs: [pre-commit, build-test, dependency]
    
    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - id: set-release-branch
      # checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
      shell: bash
      run: |
        # set release branch info
        GITHUB_HEAD_REF=${{ github.head_ref }}
        GITHUB_SPEC_VER=${GITHUB_HEAD_REF#release/}
        # set release branch info to job output
        echo "GITHUB_HEAD_REF=${{ github.head_ref }}"      >> "$GITHUB_OUTPUT"
        echo "GITHUB_SPEC_VER=${GITHUB_HEAD_REF#release/}" >> "$GITHUB_OUTPUT"

    - shell: bash
      run: |
        # get output variables
        echo "Release Branch Name         : ${{ steps.set-release-branch.outputs.GITHUB_HEAD_REF }}"
        echo "Release Branch Spec Version : ${{ steps.set-release-branch.outputs.GITHUB_SPEC_VER }}"
        echo "Software Build Version      : ${{ needs.build-test.outputs.BUILD_VERSION }}"
        echo "Workflow Run ID             : ${{ needs.build-test.outputs.WORKFLOW_RUN_ID }}"
        echo "Uploaded Artifact ID        : ${{ needs.build-test.outputs.ARTIFACT_ID }}"

    - name: Download distributions
      id: artifact-download
      uses: actions/download-artifact@v4
      with:
        artifact-ids: "${{ needs.build-test.outputs.ARTIFACT_ID }}"
        run-id: "${{ needs.build-test.outputs.WORKFLOW_RUN_ID }}"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path: dist/

    - shell: bash
      run: |
        # check artifacts located inside dist/artifact/
        tree .

    # --- release validation starts from here --- #
    - shell: bash
      run: |
        # validate that release branch specified version matches release specification
        # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
        REGEX="^[0-9]+\.[0-9]+\.[0-9]+$"
        if [[ ! "${{steps.set-release-branch.outputs.GITHUB_SPEC_VER}}" =~ $REGEX ]]; then
          echo "Error: Release Branch Specified Version does not match Release Specification (Major.Minior.Patch)."
          exit 1
        fi

    - shell: bash
      run: |
        # validate that release branch specified version AND software build version are the same
        if [ "${{ needs.build-test.outputs.BUILD_VERSION}}" != "${{steps.set-release-branch.outputs.GITHUB_SPEC_VER}}" ]; then
          echo "Error: Release Branch Specified Version is different from Software Build Version."
          exit 1
        fi

    - shell: bash
      run: |
        # validate that release version tag has not been created.
        TAG_EXIST="$(git ls-remote origin refs/tags/${{ needs.build-test.outputs.BUILD_VERSION }} | awk '{print $2}' | sed 's/refs\/tags\///g')"
        if [ -n "$TAG_EXIST" ]; then
          echo "Error: Tag ($TAG_EXIST) exists already at remote origin."
          exit 1
        fi
    # --- release validation ends here --- #
