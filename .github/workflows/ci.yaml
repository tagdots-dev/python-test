---

name: CI

on:  # yamllint disable-line rule:truthy
  pull_request:

    branches:
      - main

    types:
      - edited
      - opened
      - synchronize

  push:
    branches:
      - test-*

  workflow_call:

  workflow_dispatch:

jobs:

  pre-commit:
    uses: ./.github/workflows/reusable-pre-commit.yaml

  build-test:
    uses: ./.github/workflows/reusable-build-test.yaml

  validate-release:
    if: ${{ startsWith(github.head_ref, 'release/') }}

    needs: [pre-ci, build-test]

    runs-on: ubuntu-latest

    # outputs:
    #   RELEASE_BRANCH_HEAD_REF: ${{ steps.set-release-branch.outputs.GITHUB_HEAD_REF }}
    #   RELEASE_BRANCH_SPEC_VER: ${{ steps.set-release-branch.outputs.GITHUB_SPEC_VER }}

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - id: set-release-branch
      # checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
      shell: bash
      run: |
        # set release branch info
        GITHUB_HEAD_REF=${{ github.head_ref }}
        GITHUB_SPEC_VER=${GITHUB_HEAD_REF#release/}
        # set release branch info to job output
        echo "GITHUB_HEAD_REF=${{ github.head_ref }}"      >> "$GITHUB_OUTPUT"
        echo "GITHUB_SPEC_VER=${GITHUB_HEAD_REF#release/}" >> "$GITHUB_OUTPUT"

    - shell: bash
      run: |
        # get output variables
        echo "Release Branch Name         : ${{ steps.set-release-branch.outputs.GITHUB_HEAD_REF }}"
        echo "Release Branch Spec Version : ${{ steps.set-release-branch.outputs.GITHUB_SPEC_VER }}"
        echo "Software Build Version      : ${{ needs.build-test.outputs.BUILD_VERSION }}"

    # --- release validation starts from here --- #
    - shell: bash
      run: |
        # check release branch specified version match SemVer specification
        if [[ "${{steps.set-release-branch.outputs.GITHUB_SPEC_VER}}" =~ "^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$" ]; then
          echo "Error: Release Branch Specified Version does not match SemVer Specification (Major.Minior.Patch+)."
          exit 1
        fi

    - shell: bash
      run: |
        # compare release branch and software build version
        if [ "${{ needs.build-test.outputs.BUILD_VERSION}}" != "${{steps.set-release-branch.outputs.GITHUB_SPEC_VER}}" ]; then
          echo "Error: Release Branch Specified Version is different from Software Build Version."
          exit 1
        fi

    - shell: bash
      run: |
        # check duplicate tag
        TAG_EXIST="$(git ls-remote origin refs/tags/${{ needs.build-test.outputs.BUILD_VERSION }} | awk '{print $2}' | sed 's/refs\/tags\///g')"
        if [ -n "$TAG_EXIST" ]; then
          echo "Error: Tag ($TAG_EXIST) exists already at remote origin."
          exit 1
        fi
    # --- release validation starts from here --- #
