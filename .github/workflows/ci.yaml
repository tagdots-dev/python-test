---
# NOTE: this file is managed by terraform

name: CI

on:  # yamllint disable-line rule:truthy
  pull_request:

    branches:
      - main

    types:
      - edited
      - opened
      - synchronize

  push:
    branches:
      - test-*

  workflow_call:
    outputs:

      WORKFLOW_ID:
        value: ${{ jobs.workflow.outputs.WORKFLOW_ID }}

  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  workflow:

    runs-on: ubuntu-latest

    outputs:
      WORKFLOW_ID: ${{ steps.set-workflow-id.outputs.WORKFLOW_ID }}

    steps:

    - shell: bash
      run: |
        # get github obj
        echo "${{ toJson(github) }}"

    - shell: bash
      run: |
        # set-workflow-id
        echo "$WORKFLOW_ID=${{ github.event.workflow_run.id }}" >> "$GITHUB_OUTPUT"

    - shell: bash
      run: |
        # get-workflow-id
        echo "WORKFLOW ID: ${{ steps.set-workflow-id.outputs.WORKFLOW_ID }}"

  pre-commit:
    uses: ./.github/workflows/reusable-pre-commit.yaml

  build-test:
    uses: ./.github/workflows/reusable-build-test.yaml

  validate-release:
    if: ${{ startsWith(github.head_ref, 'release/') }}

    needs: [pre-commit, build-test]

    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - id: set-release-branch
      # checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
      shell: bash
      run: |
        # set release branch info
        GITHUB_HEAD_REF=${{ github.head_ref }}
        GITHUB_SPEC_VER=${GITHUB_HEAD_REF#release/}
        # set release branch info to job output
        echo "GITHUB_HEAD_REF=${{ github.head_ref }}"      >> "$GITHUB_OUTPUT"
        echo "GITHUB_SPEC_VER=${GITHUB_HEAD_REF#release/}" >> "$GITHUB_OUTPUT"

    - shell: bash
      run: |
        # get output variables
        echo "Release Branch Name         : ${{ steps.set-release-branch.outputs.GITHUB_HEAD_REF }}"
        echo "Release Branch Spec Version : ${{ steps.set-release-branch.outputs.GITHUB_SPEC_VER }}"
        echo "Software Build Version      : ${{ needs.build-test.outputs.BUILD_VERSION }}"
        echo "Workflow Run ID             : ${{ needs.build-test.outputs.WORKFLOW_RUN_ID }}"
        echo "Uploaded Artifact ID        : ${{ needs.build-test.outputs.ARTIFACT_ID }}"

    - name: Download distributions
      id: artifact-download
      uses: actions/download-artifact@v4
      with:
        artifact-ids: "${{ needs.build-test.outputs.ARTIFACT_ID }}"
        run-id: "${{ needs.build-test.outputs.WORKFLOW_RUN_ID }}"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path: dist/

    - shell: bash
      run: |
        # check artifacts located inside dist/artifact/
        tree .

    # --- release validation starts from here --- #
    - shell: bash
      run: |
        # validate that release branch specified version matches release specification
        # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
        REGEX="^[0-9]+\.[0-9]+\.[0-9]+$"
        if [[ ! "${{steps.set-release-branch.outputs.GITHUB_SPEC_VER}}" =~ $REGEX ]]; then
          echo "Error: Release Branch Specified Version does not match Release Specification (Major.Minior.Patch)."
          exit 1
        fi

    - shell: bash
      run: |
        # validate that release branch specified version AND software build version are the same
        if [ "${{ needs.build-test.outputs.BUILD_VERSION}}" != "${{steps.set-release-branch.outputs.GITHUB_SPEC_VER}}" ]; then
          echo "Error: Release Branch Specified Version is different from Software Build Version."
          exit 1
        fi

    - shell: bash
      run: |
        # validate that release version tag has not been created.
        TAG_EXIST="$(git ls-remote origin refs/tags/${{ needs.build-test.outputs.BUILD_VERSION }} | awk '{print $2}' | sed 's/refs\/tags\///g')"
        if [ -n "$TAG_EXIST" ]; then
          echo "Error: Tag ($TAG_EXIST) exists already at remote origin."
          exit 1
        fi
    # --- release validation ends here --- #


  # notify-slack:
  #   if: ${{ always() && !failure() }}

  #   needs: [validate-release]

  #   runs-on: ubuntu-latest

  #   steps:

  #   - shell: bash
  #     # checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
  #     run: |
  #       echo "${{ toJson(github) }}"

  #   - shell: bash
  #     # checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
  #     run: |
  #       if [ "${{ github.head_branch }}" != '' ]; then
  #         echo "Branch name   : ${{ github.head_branch }}"
  #         echo "Workflow name : ${{ github.event.workflow_run.name }}"
  #         echo "Workflow URL  : ${{ github.event.workflow_run.html_url }}"
  #       elif [ "${{ github.head_ref }}" != '' ]; then
  #         # scenario - pull request
  #         echo "Branch name     : ${{ github.head_ref }}"
  #         echo "Workflow name   : ${{ github.workflow }}"
  #         echo "Pull Requset URL: ${{ github.event.pull_request.html_url }}"
  #       fi


  # notify-slack:
  #   if: ${{ always() && !failure() }}

  #   needs: [validate-release]

  #   runs-on: ubuntu-latest

  #   steps:

  #   - shell: bash
  #     # checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
  #     run: |
  #       echo "${{ toJson(github) }}"

  #   - shell: bash
  #     # checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
  #     run: |
  #       echo "${{ toJson(github.event) }}"

  #   - shell: bash
  #     # checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
  #     run: |
  #       echo "Branch - ${{ github.head_ref }} - triggers workflow - ${{ github.workflow }}"

  #   - name: Post message to Slack
  #     uses: slackapi/slack-github-action@v2.0.0
  #     with:
  #       method: chat.postMessage
  #       token: "${{ secrets.SECRET_SLACK_APP_GITHUB_BOT }}"
  #       payload: |
  #         channel: "${{ secrets.SECRET_SLACK_CHANNEL_CICD }}"
  #         text: "Workflow ${{ github.workflow.name }} result: ${{ github.event.workflow_run.conclusion }}"
