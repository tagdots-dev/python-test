---

name: CD

on:  # yamllint disable-line rule:truthy

  pull_request:

    branches:
      - main

    types:
      - closed

  workflow_dispatch:

env:
  PACKAGE_NAME: pkg-15903
  PYTHON_VERSION: '3.12.x'

jobs:

  push-git-tag:
    # condition: pull request is merged
    if: ${{ startsWith(github.head_ref, 'release/') && github.event.pull_request.merged == true }}

    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - id: set-release-version
      shell: bash
      # checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
      env:
        GH_TOKEN: ${{ secrets.SECRET_PAT }}
      run: |
        # push git tag
        GITHUB_HEAD_REF=${{ github.head_ref }}
        GITHUB_SPEC_VER=${GITHUB_HEAD_REF#release/}

        # create and push a lightweight tag
        git tag ${GITHUB_SPEC_VER}
        git push origin ${GITHUB_SPEC_VER}

  publish-TestPyPI:

    needs: [push-git-tag]

    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - shell: bash
      run: |
        # install build dependencies
        make build
        python -m pip install -U twine

    - shell: bash
      run: |
        # check distributions
        tree dist/
        python -m twine check  dist/*

    - shell: bash
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: "${{ secrets.SECRET_TESTPYPI }}"
        TWINE_REPOSITORY_URL: "https://test.pypi.org/legacy/"
      run: |
        # Publish distributions to TestPyPI
        python -m twine upload --verbose dist/*

  validate-TestPyPI:

    needs: [publish-TestPyPI]

    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - shell: bash
      env:
        INDEX_URL: "https://test.pypi.org/simple/"
        EXTRA_INDEX_URL: "https://pypi.org/simple/"
      run: |
        # install package from TestPyPI and run app to show version
        pip install ${{ env.PACKAGE_NAME }} --index-url ${{ env.INDEX_URL }} --extra-index-url ${{ env.EXTRA_INDEX_URL }}
        ${{ env.PACKAGE_NAME }} --version

  publish-PyPI:

    needs: [push-git-tag]

    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - shell: bash
      run: |
        # install build dependencies
        make build
        pip install -U twine

    - shell: bash
      run: |
        # check distributions
        tree dist/
        python -m twine check  dist/*

    - shell: bash
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: "${{ secrets.SECRET_PYPI }}"
        TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
      run: |
        # Publish distributions to PyPI
        python -m twine upload --verbose dist/*

  validate-PyPI:

    needs: [publish-PyPI]

    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - shell: bash
      env:
        INDEX_URL: "https://pypi.org/simple/"
      run: |
        # install package from PyPI and run app to show version
        pip install ${{ env.PACKAGE_NAME }}
        ${{ env.PACKAGE_NAME }} --version
