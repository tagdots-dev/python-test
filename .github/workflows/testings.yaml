---

name: testings

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - test-*

  pull_request:
    branches:
      - main

  workflow_dispatch:

permissions:
  contents: read

env:
  GIT_REF_NAME: 'default'
  RE_GIT_REF_NAME: 'default'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.12]

    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: make build
      run: make build

    - name: get build version
      id: get-build-version
      run: |
        # get build version
        echo "BUILD_VERSION=$(pkg-15903 --version | awk '{print $3}')" >> "$GITHUB_OUTPUT"

    outputs:
      BUILD_VERSION: ${{ steps.get-build-version.outputs.BUILD_VERSION }}

  test:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.12]

    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install test dependencies
      run: python -m pip install -e .[test]

    - name: make test
      run: make test

  validate:
    needs: [build, test]
    # : if startsWith(github.head_ref, 'release/')
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.12]

    runs-on: ubuntu-latest
    steps:

    - name: Get Outputs from github cotext and across jobs
      run: |
        # get outputs
        # parse github object into Json
        # echo "GH_OBJ= $ {{ toJson(github) }}"

        ##################################
        GIT_REF_NAME="${{ github.ref_name }}"
        # about getting the github.ref_name and how to manipulate it
        # $GIT_REF_NAME would be the same as ${GIT_REF_NAME}

        ##################################
        echo "Branch Release name                 : ${{ github.ref_name }}"
        echo "Branch Release name (assigned var)  : ${GIT_REF_NAME}"
        echo "Software Build ver  (from build job): ${{ needs.build.outputs.BUILD_VERSION }}"

        ##################################
        # assign a value to RE_GIT_REF_NAME variable and how to manipulate it
        RE_GIT_REF_NAME="release/1.0.1"
        echo "Branch Release ver (take away 'release/'): ${RE_GIT_REF_NAME#release/}"
        echo "Software Build ver                       : ${{ needs.build.outputs.BUILD_VERSION }}"

        ##################################
        # compare two variable

    - name: Evaluate
      run: |
        echo "RE_GIT_REF_NAME: ${RE_GIT_REF_NAME}"
        echo "GIT_REF_NAME   : ${GIT_REF_NAME}"
        if [[ "${RE_GIT_REF_NAME}" == "${GIT_REF_NAME}" ]]; then
          echo "both of the variables are the same"
        else
          echo "both of the variables are different"
        fi
