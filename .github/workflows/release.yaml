---
# on push to main > build package > upload artifacts

name: release

on:
  pull_request:
    types:
      - closed

    branches:
      - main

  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12.10'

permissions:
  contents: write

jobs:
  release:
    if: startsWith(github.head_ref, 'release/')

    runs-on: ubuntu-latest
    steps:

    - name: Get release branch
      id: get-release-branch
      run: |
        # get release branch and version
        GIT_HEAD_REF="${{ github.head_ref }}"
        #checkov:skip=CKV_GHA_2:Ensure run commands are not vulnerable to shell injection
        echo "GIT_BRANCH=${GIT_HEAD_REF}" >> "$GITHUB_OUTPUT"
        echo "GIT_BRANCH_VERSION=${GIT_HEAD_REF#release/v}" >> "$GITHUB_OUTPUT"

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Build and Package Application
      run: |
        # get latest build
        python -m pip install -U build

        # build package
        python -m build

        # install software into the current path
        python -m pip install -e .

    - name: Get Build Version
      id: get-software-build
      run: |
        echo "BUILD_VERSION=$(python src/pkg_15903/run.py --version | awk '{print $3}')"  >> "$GITHUB_OUTPUT"

    - name: Upload distributions wheel
      id: artifact-upload-wheel
      uses: actions/upload-artifact@v4
      with:
        path: dist/*.whl
        if-no-files-found: error
        retention-days: 3
        overwrite: true
        compression-level: 0

    - name: Upload distributions tar.gz
      id: artifact-upload-targz
      uses: actions/upload-artifact@v4
      with:
        path: dist/*.tar.gz
        if-no-files-found: error
        retention-days: 3
        overwrite: true
        compression-level: 0

    - name: Get Outputs
      run: |
        # get various outputs
        echo 'Branch Release name    : ${{ steps.get-release-branch.outputs.GIT_BRANCH }}'
        echo 'Branch Release version.: ${{ steps.get-release-branch.outputs.GIT_BRANCH_VERSION }}'
        echo 'Software Build version.: ${{ steps.get-software-build.outputs.BUILD_VERSION }}'

    - name: Compare Branch Version and Build Version 1
      if: ${{ steps.get-release-branch.outputs.GIT_BRANCH_VERSION == steps.get-software-build.outputs.BUILD_VERSION }}
      run: echo "git branch version is equal to bulid version"

    - name: Compare Branch Version and Build Version 2
      if: ${{ steps.get-release-branch.outputs.GIT_BRANCH_VERSION != steps.get-software-build.outputs.BUILD_VERSION }}
      run: echo "git branch version is NOT equal to bulid version"
